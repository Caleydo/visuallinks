macro(unlist_param param outparam)
	if(DEFINED ${param})
		set(${outparam} ${${param}})
	else()
		set(${outparam} ${param})
	endif()
endmacro(unlist_param)


macro(add_component_data component_inc_dir) #component_inc_dir component_lib depending_files
	unlist_param(${component_inc_dir} comp_inc_clean)
	set(COMPONENTS_INC_DIR ${COMPONENTS_INC_DIR} ${comp_inc_clean} PARENT_SCOPE)
	if(${ARGC} GREATER  1)
		unlist_param(${ARGV1} comp_lib_clean)
		set(COMPONENTS_LIBS ${COMPONENTS_LIBS} ${comp_lib_clean} PARENT_SCOPE)
	endif()
	if(${ARGC} GREATER  2)
		unlist_param(${ARGV2} comp_dep_files_clean)
		set(COMPONENTS_DEPENDING_FILES ${COMPONENTS_DEPENDING_FILES} ${comp_dep_files_clean} PARENT_SCOPE)
	endif()
endmacro(add_component_data)

macro(add_component name)
	if(${ARGC} GREATER  1)
		option(LinksComponent_${name} "Include Component ${name}" ${ARGV1})
	else()
		option(LinksComponent_${name} "Include Component ${name}" true)
	endif()
	if(LinksComponent_${name})
		message("adding component ${name}")
		add_subdirectory(${COMPONENTS_DIR}/${name} ${BIN_DIR}/${name})
	endif()
endmacro(add_component)

macro(use_components target)
	message("${target} uses components")
	include_directories(${COMPONENTS_INC_DIR})
	target_link_libraries(${target} ${COMPONENTS_LIBS})
	
	set(copytarget ${target}_copy)
	if(NOT TARGET ${copytarget})	
		add_custom_target(${copytarget} ${CMAKE_COMMAND} -E echo "copying files for  ${target}" DEPENDS ${COMPONENTS_DEPENDING_FILES})
		add_dependencies(${target} ${copytarget})
	endif()
	COPY_FILES_INTO_DIRECTORY_IF_CHANGED(COMPONENTS_DEPENDING_FILES  ${CMAKE_CURRENT_BINARY_DIR} ${copytarget})
endmacro(use_components)

macro(runtime_files target copyfiles)
	set(copytarget ${target}_copy)
	if(NOT TARGET ${copytarget})	
		set(depfiles ${copyfiles} ${COMPONENTS_DEPENDING_FILES})
		add_custom_target(${copytarget} ${CMAKE_COMMAND} -E echo "copying files for  ${target}" DEPENDS ${depfiles})
		add_dependencies(${target} ${copytarget})
	endif()
	COPY_FILES_INTO_DIRECTORY_IF_CHANGED(${copyfiles}  ${CMAKE_CURRENT_BINARY_DIR} ${copytarget})
endmacro(runtime_files)