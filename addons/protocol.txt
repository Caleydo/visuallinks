                                                                 Thomas Geymayer
                                                   Graz University of Technology
                                                                      March 2012


                           Visual Link Protocol - VLP                          

1. Introduction

   Protocol for communication between clients and the server for visualizing
   links between regions of interest on the screen.

2. Transmission

   For transmission of messages every communication medium able to transfer
   ascii text can be used.
   
2.1 qtfullscreensystem

   The server included in the qtfullscreensystem uses WebSockets for
   communication with the clients and normally listens on port 4487. The socket
   stays open as long as the client is running and is reused for every
   transmitted message.

3. Messages

   All messages are JSON encoded and are transfered as JSON objects. Every
   message has to contain at least the following fields:
   
   task   Describes the purpose of the message
   id     An common identifier for all elements of the current selection
   stamp  Timestamp of the original request

3.1 Message types

   REGISTER

              {
                'task': 'REGISTER',
                'name': 'Optional Name',
                'pos': [px, py],
                'region': [x, y, width, height]
              }

   RESIZE

              {
                'task': 'RESIZE',
                'region': [x, y, width, height]
              }

   INITIATE   Initiates a new routing and linking process by sending the
              identifier to search to the server. Locations inside
              the clients region can be added in the optional 'regions' field.
              
              The following example shows a message to initiate a search for the
              string 'test' with two occurrences bounded by one rectangular and
              one triangular region:

              {
                'task': 'INITIATE',
                'id': 'test',
                'stamp': 123456789,
                'regions': [
                             [[12, 34], [112, 34], [112, 64], [12, 64]],
                             [[40, 100], [100, 200], [10, 200]]
                           ]
              }

   REQUEST    After the client has issued an INITIATE to the server the server
              sends a REQUEST message to all clients with the new search id
              and timestamp. Every client should send back a FOUND message
              with all occurrences of the requested id inside their region.
              
              The client which sent the corresponding INITIATE also gets a
              REQUEST. If he hasn't already sent the regions with the INITIATE
              he should now send them back.
              
              The following example shows the REQUEST the server would send
              upon receiving the example from INITIATE:
              
              {
                'task': 'REQUEST',
                'id': 'test',
                'stamp': 123456789
              }

   FOUND      The client...
   
              {
                'task': 'FOUND',
                'id': 'test',
                'stamp': 123456789,
                'regions': [
                             [[12, 34], [112, 34], [112, 64], [12, 64]],
                             [[40, 100], [100, 200], [10, 200]]
                           ]
              }

   ABORT      If a client sends an ABORT to the server then the server forwards
              the message to all clients and removes every displayed route for
              the given link id.
              
              If all routes should be aborted set id to the empty string and
              stamp to -1.

              {
                'task': 'ABORT',
                'id': 'test',
                'stamp': 123456789
              }

   GET        A client can request currently set configuration values and
              parameters with sending a GET request.
              
              {
                'task': 'GET',
                'id': '/routing'
              }

   GET-FOUND  After receiving a GET request the server answers with a GET-FOUND
              which continas the requested id and it's value(s)
              
              {
                'task': 'GET-FOUND',
                'id': '/routing',
                'val': {
                  'active:': 'CPURouting',
                  'available': [ ['GPURouting', 1],
                                 ['CPURouting', 1] ]
                }
              }

   SET        A client can also set configuration values and parameters with
              sending a SET request.
              
              {
                'task': 'SET',
                'id': '/routing',
                'val': 'CPURouting'
              }
